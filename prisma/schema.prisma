generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int              @id @default(autoincrement())
  username        String           @unique
  password        String
  firstname       String
  lastname        String
  email           String           @unique
  phone           String?
  role            String           @default("viewer")
  isactive        String           @default("pending")
  lastlogin       DateTime?        @db.Timestamp(6)
  createdat       DateTime         @default(now()) @db.Timestamp(6)
  job             String?
  Address         Address?
  Session         Session[]
  UserPreferences UserPreferences?
  BankAccount     BankAccount?
  UserProject     UserProject[]
  Timeline        Timeline[]
  SoftwareNotes   SoftwareNotes[]

  @@index([email])
  @@index([username])
}

model UserPreferences {
  id          Int         @id @default(autoincrement())
  visualtheme VisualTheme @default(Light)
  language    Language    @default(English)
  userid      Int         @unique
  User        User        @relation(fields: [userid], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Session {
  id        Int      @id @default(autoincrement())
  createdat DateTime @default(now()) @db.Timestamp(6)
  updatedat DateTime @default(now()) @db.Timestamp(6)
  userid    Int
  User      User     @relation(fields: [userid], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([userid], map: "Session_userId_idx")
}

model Address {
  id         Int     @id @default(autoincrement())
  street     String?
  city       String?
  state      String?
  postalcode String?
  country    String?
  userid     Int?    @unique
  User       User?   @relation(fields: [userid], references: [id], onUpdate: NoAction)
}

model BankAccount {
  id           Int           @id @default(autoincrement())
  balance      Float         @default(0)
  userId       Int           @unique
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  createdAt    DateTime      @default(now()) @db.Timestamp(6)
  transactions Transaction[]
}

model Transaction {
  id            Int             @id @default(autoincrement())
  amount        Float
  type          TransactionType
  description   String?
  bankAccountId Int
  bankAccount   BankAccount     @relation(fields: [bankAccountId], references: [id], onDelete: Cascade)
  createdAt     DateTime        @default(now()) @db.Timestamp(6)

  @@index([bankAccountId])
  @@index([createdAt])
}

model Projects {
  id          Int           @id @default(autoincrement())
  name        String
  description String?
  tags        String[]
  state       ProjectState  @default(PLANNING)
  createdAt   DateTime      @default(now()) @db.Timestamp(6)
  updatedAt   DateTime      @default(now()) @db.Timestamp(6)
  users       UserProject[]
}

model UserProject {
  id        Int         @id @default(autoincrement())
  userId    Int
  projectId Int
  role      ProjectRole @default(MEMBER)
  joinedAt  DateTime    @default(now()) @db.Timestamp(6)
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  project   Projects    @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
  @@index([userId])
  @@index([projectId])
}

model Timeline {
  id          Int               @id @default(autoincrement())
  userId      Int
  eventType   TimelineEventType
  description String?
  createdAt   DateTime          @default(now()) @db.Timestamp(6)
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([eventType])
}

model SoftwareNotes {
  id            Int        @id @default(autoincrement())
  userId        Int
  title         String
  description   String
  status        NoteStatus @default(PLANNED)
  category      String
  subcategories String[]
  complexity    Complexity @default(INTERMEDIATE)
  startDate     DateTime?
  endDate       DateTime?

  // Learning resources
  resources Resource[]
  links     Link[]

  // Content details
  codeSnippets CodeSnippet[]
  concepts     Concept[]

  // Progress tracking
  progress      Int     @default(0)
  personalNotes String?

  // Metadata
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @default(now()) @db.Timestamp(6)
  isPublic  Boolean  @default(false)

  // Relations
  User User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([category])
}

model Resource {
  id    Int          @id @default(autoincrement())
  type  ResourceType
  title String
  url   String?
  notes String?

  // Relations
  softwareNoteId Int
  softwareNote   SoftwareNotes @relation(fields: [softwareNoteId], references: [id], onDelete: Cascade)

  @@index([softwareNoteId])
}

model Link {
  id          Int     @id @default(autoincrement())
  title       String
  url         String
  description String?

  // Relations
  softwareNoteId Int
  softwareNote   SoftwareNotes @relation(fields: [softwareNoteId], references: [id], onDelete: Cascade)

  @@index([softwareNoteId])
}

model CodeSnippet {
  id          Int     @id @default(autoincrement())
  title       String
  language    String
  code        String  @db.Text
  explanation String? @db.Text

  // Relations
  softwareNoteId Int
  softwareNote   SoftwareNotes @relation(fields: [softwareNoteId], references: [id], onDelete: Cascade)

  @@index([softwareNoteId])
}

model Concept {
  id          Int    @id @default(autoincrement())
  name        String
  description String

  // Relations
  softwareNoteId Int
  softwareNote   SoftwareNotes @relation(fields: [softwareNoteId], references: [id], onDelete: Cascade)

  @@index([softwareNoteId])
}

enum VisualTheme {
  Light
  Dark
  Auto
}

enum Language {
  English
  Spanish
  Portuguese
}

enum ProjectRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
}

enum ProjectState {
  PLANNING
  IN_PROGRESS
  COMPLETED
  DELAYED
}

enum TimelineEventType {
  LOGIN
  LOGOUT
  PROFILE_UPDATE
  PASSWORD_CHANGE
  PROJECT_CREATED
  PROJECT_JOINED
  PROJECT_UPDATED
  TRANSACTION_MADE
  ACCOUNT_CREATED
  SETTINGS_CHANGED
  NOTE_CREATED
  MESSAGE_SENT
  SYSTEM_NOTIFICATION
}

enum NoteStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  PAUSED
  ABANDONED
}

enum Complexity {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum ResourceType {
  DOCUMENTATION
  ARTICLE
  VIDEO
  COURSE
  BOOK
  GITHUB_REPO
  TUTORIAL
  OTHER
}
